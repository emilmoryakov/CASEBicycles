#MySQL Code:


CREATE DATABASE CASEBicycles;
USE CASEBicycles;

CREATE TABLE Product (
    productID INT AUTO_INCREMENT PRIMARY KEY,
    referenceNumber NVARCHAR(100),
    specifications TEXT,
    releaseYear YEAR,
    model VARCHAR(100),
    price FLOAT(10),
    brand VARCHAR(100)
);

CREATE TABLE Bike (
    bikeID INT PRIMARY KEY,
    bikeType ENUM('BMX', 'Mountain', 'Road', 'Hybrid', 'Cruiser', 'Electric') NOT NULL,
    FOREIGN KEY (bikeID) REFERENCES Product(productID)
);

CREATE TABLE Accessory (
    accessoryID INT PRIMARY KEY,
    accessoryType ENUM('Helmet', 'Lights', 'Lock', 'Basket', 'Pump', 'Bell', 'Wheels', 'Handlebars', 'Chains', 'Saddle', 'Brakes') NOT NULL,
    FOREIGN KEY (accessoryID) REFERENCES Product(productID)
);

CREATE TABLE Client (
    clientID INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(30) NOT NULL UNIQUE,
    passwordHash VARCHAR(255) NOT NULL, 
    salt VARCHAR(255) NOT NULL,
    firstName VARCHAR(100) NOT NULL,
    lastName VARCHAR(100) NOT NULL,
    contactNumber VARCHAR(20) NOT NULL,
    emailAddress VARCHAR(150) NOT NULL
);

CREATE TABLE Buyer (
    buyerID INT PRIMARY KEY,
    address TEXT NOT NULL,
    FOREIGN KEY (buyerID) REFERENCES Client(clientID)
);

CREATE TABLE Seller (
    sellerID INT PRIMARY KEY,
    FOREIGN KEY (sellerID) REFERENCES Client(clientID)
);

CREATE TABLE Transaction (
    transactionID INT AUTO_INCREMENT PRIMARY KEY,
    transactionDate DATE,
    totalPrice FLOAT(10)
);

CREATE TABLE Transaction_Purchase (
    transactionID INT PRIMARY KEY,
    transactionDate DATE,
    purchaseClientID INT,
    FOREIGN KEY (purchaseClientID) REFERENCES Seller(sellerID),
    FOREIGN KEY (transactionID) REFERENCES Transaction(transactionID)
);

CREATE TABLE Transaction_Sale (
    transactionID INT PRIMARY KEY,
    transactionDate DATE,
    saleClientID INT,
    saleType ENUM('Online', 'InStore') NOT NULL,
    FOREIGN KEY (saleClientID) REFERENCES Buyer(buyerID),
    FOREIGN KEY (transactionID) REFERENCES Transaction(transactionID)
);

CREATE TABLE OnlineSale (
    saleID INT PRIMARY KEY,
    trackingID VARCHAR(100),
    FOREIGN KEY (saleID) REFERENCES Transaction_Sale(transactionID)
);

CREATE TABLE InStoreSale (
    saleID INT PRIMARY KEY,
    FOREIGN KEY (saleID) REFERENCES Transaction_Sale(transactionID)
);

CREATE TABLE LineItem (
    lineItemID INT AUTO_INCREMENT PRIMARY KEY,
    transactionID INT,
    productID INT,
    quantity INT NOT NULL,
    price FLOAT(10) NOT NULL,
    FOREIGN KEY (transactionID) REFERENCES Transaction(transactionID),
    FOREIGN KEY (productID) REFERENCES Product(productID)
);

CREATE TABLE Inventory (
    inventoryID INT AUTO_INCREMENT PRIMARY KEY,
    productID INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (productID) REFERENCES Product(productID)
);


/*
Explanation of the code:

This MySQL code was developed in collaboration with all of the group members, those being: Emil Moryakov, Alvin Yadav, Sashwat Sharma, and Rashad Rahimzade. The layout of our database follows the ER diagram that was submitted by our group last week. The clarification of our approach is as follows:

- The Bike and Accessories tables are children of the product table, being linked to the parent with the Product ID--which also serve as primary keys. Every instance of a Bike ID and Accessory ID will be an instance of the Product ID. The bicycles and accessories possess a list of pre-defined categories to sort products into, as well as other self-explanatory unique properties and properties inherited from the Product table. 

- Client is also a parent table, and the Buyer and Seller tables inherit from it, similarly using the Client ID has both a primary and foreign key. The seller has an additional field in the form of an address to facilitate the shipping of the products to their locations. It is also important to note the passwordHash and salt fields in the Client table, which will be used to encrypt the passwords entered by users, as their passwords would first be hashed and then "salted" with an additional random input. 

- To track transactions, we created a parent table Transaction with the basic details like the date, price of the order, and the transaction ID, and created the child tables Transaction_Sale and Transaction_Purchase to deal with buying and selling respectively. These tables would record who the product was being purchased from or sold to through foreign keys, and the Transaction_Sale table would also record if it was an in-store or online transaction. As such, the OnlineSale and InStoreSale tables have saleIDs referenced from the Transaction_Sale table--making them children of the Transaction_Sale table--and the OnlineSale additionally has a tracking ID. 

- The LineItem Table will be used to record how many of each product is sold to a customer, and will reference the previously established transactionID and productid for these purposes. 

- The Inventory Table will be used to modify and record the stock of products that exist within the database, using productID as the foreign key for this use. 
*/

